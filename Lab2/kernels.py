import numpy as np

def ZSUv():
    x_shift = 10
    y_shift = 20
    return [x_shift, y_shift]

def Inversia():
    return np.array([
        [0, 0, 0],
        [0, -1, 0],
        [0, 0, 0]
        ], dtype=np.uint8)

def Gauss_11x11():
    return np.array([
        [ 0.000003, 0.000022, 0.000055, 0.000104, 0.000149, 0.000163, 0.000149, 0.000104, 0.000055, 0.000022, 0.000003 ],
        [ 0.000022, 0.000158, 0.000392, 0.000739, 0.001055, 0.001157, 0.001055, 0.000739, 0.000392, 0.000158, 0.000022 ],
        [ 0.000055, 0.000392, 0.000969, 0.001828, 0.002615, 0.002861, 0.002615, 0.001828, 0.000969, 0.000392, 0.000055 ],
        [ 0.000104, 0.000739, 0.001828, 0.003456, 0.004938, 0.005418, 0.004938, 0.003456, 0.001828, 0.000739, 0.000104 ],
        [ 0.000149, 0.001055, 0.002615, 0.004938, 0.007055, 0.007728, 0.007055, 0.004938, 0.002615, 0.001055, 0.000149 ],
        [ 0.000163, 0.001157, 0.002861, 0.005418, 0.007728, 0.008469, 0.007728, 0.005418, 0.002861, 0.001157, 0.000163 ],
        [ 0.000149, 0.001055, 0.002615, 0.004938, 0.007055, 0.007728, 0.007055, 0.004938, 0.002615, 0.001055, 0.000149 ],
        [ 0.000104, 0.000739, 0.001828, 0.003456, 0.004938, 0.005418, 0.004938, 0.003456, 0.001828, 0.000739, 0.000104 ],
        [ 0.000055, 0.000392, 0.000969, 0.001828, 0.002615, 0.002861, 0.002615, 0.001828, 0.000969, 0.000392, 0.000055 ],
        [ 0.000022, 0.000158, 0.000392, 0.000739, 0.001055, 0.001157, 0.001055, 0.000739, 0.000392, 0.000158, 0.000022 ],
        [ 0.000003, 0.000022, 0.000055, 0.000104, 0.000149, 0.000163, 0.000149, 0.000104, 0.000055, 0.000022, 0.000003 ],
        ], dtype=np.float32)

def Move_diagonal():
    return np.array([
        [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1 ],
        [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0 ],
        [ 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0 ],
        [ 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0 ],
        [ 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0 ],
        [ 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0 ],
        [ 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],
        ], dtype=np.float32)

def Rizkist():
    return np.array([
        [0, -1, 0,],
        [-1, 5, -1,],
        [0, -1, 0,],
        ], dtype=np.uint8)

def Sobel_diag():
    return np.array([
        [-2, -1, 0,],
        [-1, 0, 1,],
        [0, 1, 2,],
        ], dtype=np.uint8)

def Border():
    return np.array([
        [-1, -1, -1,],
        [-1, 8, -1,],
        [-1, -1, -1,],
        ], dtype=np.uint8)

def My_Kernel():
    return np.array([
        [-21, -1, 41,],
        [-1, 8, -1,],
        [41, -1, -21,],
        ], dtype=np.uint8)
